name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_messaging_app
          MYSQL_USER: django_user
          MYSQL_PASSWORD: django_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config default-libmysqlclient-dev build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mysqlclient
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f messaging_app/requirements.txt ]; then
          pip install -r messaging_app/requirements.txt
        fi
        # Install testing dependencies
        pip install pytest pytest-django pytest-cov pytest-html coverage

    - name: Wait for MySQL to be ready
      run: |
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -proot_password --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done
        echo 'MySQL is ready!'

    - name: Set up Django settings for testing
      run: |
        # Create test settings file
        cat > test_settings.py << EOF
        from messaging_app.settings import *
        
        # Database configuration for testing
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.mysql',
                'NAME': 'test_messaging_app',
                'USER': 'django_user',
                'PASSWORD': 'django_password',
                'HOST': '127.0.0.1',
                'PORT': '3306',
                'OPTIONS': {
                    'charset': 'utf8mb4',
                },
                'TEST': {
                    'CHARSET': 'utf8mb4',
                    'COLLATION': 'utf8mb4_unicode_ci',
                }
            }
        }
        
        # Use in-memory cache for testing
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            }
        }
        
        # Disable migrations for faster tests
        class DisableMigrations:
            def __contains__(self, item):
                return True
            def __getitem__(self, item):
                return None
        
        MIGRATION_MODULES = DisableMigrations()
        
        # Test-specific settings
        PASSWORD_HASHERS = [
            'django.contrib.auth.hashers.MD5PasswordHasher',
        ]
        
        # Disable logging during tests
        LOGGING_CONFIG = None
        
        SECRET_KEY = 'test-secret-key-for-ci'
        DEBUG = True
        EOF

    - name: Run Django migrations
      env:
        DJANGO_SETTINGS_MODULE: test_settings
      run: |
        python manage.py migrate --verbosity=2

    - name: Run Django tests
      env:
        DJANGO_SETTINGS_MODULE: test_settings
      run: |
        # Run Django's built-in tests
        python manage.py test --verbosity=2
        
        # Run pytest tests with coverage
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing \
               --html=reports/pytest_report.html --self-contained-html \
               --junitxml=reports/junit.xml

    - name: Install code quality tools
      run: |
        pip install flake8 flake8-django flake8-import-order flake8-docstrings

    - name: Run flake8 linting (strict)
      run: |
        # Create flake8 configuration
        cat > setup.cfg << EOF
        [flake8]
        max-line-length = 88
        max-complexity = 10
        exclude = 
            .git,
            __pycache__,
            migrations,
            venv,
            env,
            .venv,
            .env,
            node_modules,
            .tox,
            build,
            dist
        ignore = 
            E203,  # whitespace before ':'
            W503,  # line break before binary operator
            D100,  # Missing docstring in public module
            D101,  # Missing docstring in public class
            D102,  # Missing docstring in public method
            D103,  # Missing docstring in public function
            D104,  # Missing docstring in public package
            D105   # Missing docstring in magic method
        per-file-ignores =
            */settings/*.py:E501,F401,F403,F405
            */test_*.py:D100,D101,D102,D103,D104,D105
            */tests.py:D100,D101,D102,D103,D104,D105
            */conftest.py:D100,D101,D102,D103,D104,D105
            manage.py:D100
        EOF
        
        # Run flake8 with strict checking - BUILD WILL FAIL ON ANY ERRORS
        echo "Running flake8 linting..."
        flake8 . --count --show-source --statistics --tee --output-file=reports/flake8-report.txt
        
        # Check exit code and fail build if linting errors found
        if [ $? -ne 0 ]; then
          echo "❌ Linting errors detected! Build failed."
          echo "Please fix the linting errors before proceeding."
          exit 1
        else
          echo "✅ No linting errors found!"
        fi

    - name: Generate comprehensive coverage reports
      env:
        DJANGO_SETTINGS_MODULE: test_settings
      run: |
        # Create reports directory
        mkdir -p reports
        
        # Generate coverage reports in multiple formats
        coverage xml -o reports/coverage.xml
        coverage html -d reports/htmlcov
        coverage json -o reports/coverage.json
        coverage report --format=markdown > reports/coverage-summary.md
        
        # Generate coverage badge data
        coverage report --format=total > reports/coverage-total.txt
        COVERAGE_PERCENT=$(cat reports/coverage-total.txt)
        echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
        
        # Create coverage summary for artifacts
        echo "# Coverage Report Summary" > reports/coverage-info.md
        echo "" >> reports/coverage-info.md
        echo "**Total Coverage:** ${COVERAGE_PERCENT}%" >> reports/coverage-info.md
        echo "**Generated:** $(date)" >> reports/coverage-info.md
        echo "**Python Version:** ${{ matrix.python-version }}" >> reports/coverage-info.md
        echo "" >> reports/coverage-info.md
        coverage report --format=markdown >> reports/coverage-info.md

    - name: Check coverage threshold
      run: |
        # Set minimum coverage threshold (adjust as needed)
        MINIMUM_COVERAGE=80
        CURRENT_COVERAGE=$(cat reports/coverage-total.txt)
        
        echo "Current coverage: ${CURRENT_COVERAGE}%"
        echo "Minimum required: ${MINIMUM_COVERAGE}%"
        
        if (( $(echo "$CURRENT_COVERAGE < $MINIMUM_COVERAGE" | bc -l) )); then
          echo "❌ Coverage ${CURRENT_COVERAGE}% is below minimum threshold of ${MINIMUM_COVERAGE}%"
          echo "Please add more tests to improve coverage."
          exit 1
        else
          echo "✅ Coverage ${CURRENT_COVERAGE}% meets minimum threshold of ${MINIMUM_COVERAGE}%"
        fi

    - name: Run security checks with bandit
      run: |
        pip install bandit
        mkdir -p reports
        
        # Run bandit security analysis
        echo "Running security analysis with bandit..."
        bandit -r . -f json -o reports/bandit-report.json -x "*/tests/*,*/test_*,*/migrations/*" || true
        bandit -r . -x "*/tests/*,*/test_*,*/migrations/*" || true
        
        echo "✅ Security analysis completed"

    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports-python-${{ matrix.python-version }}
        path: |
          reports/flake8-report.txt
          reports/bandit-report.json
          reports/coverage.xml
          reports/coverage.json
          reports/coverage-summary.md
          reports/coverage-info.md
          reports/htmlcov/
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

    - name: Upload test results and coverage
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-python-${{ matrix.python-version }}
        path: |
          reports/pytest_report.html
          reports/junit.xml
          reports/htmlcov/
          reports/coverage.xml
          reports/coverage-info.md
        retention-days: 30

    - name: Create coverage badge
      if: matrix.python-version == '3.11' && github.ref == 'refs/heads/main'
      run: |
        # Install badge generator
        pip install coverage-badge
        
        # Generate coverage badge
        coverage-badge -o reports/coverage-badge.svg
        
        # Upload badge as artifact
        echo "Coverage badge generated: ${COVERAGE_PERCENT}%"

    - name: Comment PR with detailed results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      with:
        script: |
          const fs = require('fs');
          try {
            // Read coverage info
            const coverageInfo = fs.readFileSync('reports/coverage-info.md', 'utf8');
            
            // Read flake8 results
            let flake8Status = '✅ No linting errors';
            try {
              const flake8Report = fs.readFileSync('reports/flake8-report.txt', 'utf8');
              if (flake8Report.trim()) {
                flake8Status = '❌ Linting errors found - check artifacts';
              }
            } catch (e) {
              // File doesn't exist means no errors
            }
            
            const body = `## 🔍 Code Quality Report
            
            ### 📊 Test Coverage
            ${coverageInfo}
            
            ### 🧹 Code Linting
            ${flake8Status}
            
            ### 🔒 Security Analysis
            ✅ Bandit security scan completed
            
            ### 📁 Artifacts
            - 📈 [Coverage Report](${context.payload.pull_request.html_url}/checks)
            - 🧪 [Test Results](${context.payload.pull_request.html_url}/checks)
            - 📝 [Linting Report](${context.payload.pull_request.html_url}/checks)
            - 🛡️ [Security Report](${context.payload.pull_request.html_url}/checks)
            
            **Python Version:** ${{ matrix.python-version }}
            **Build:** [View Details](${context.payload.pull_request.html_url}/checks)`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          } catch (error) {
            console.log('Could not post detailed comment:', error);
          }
