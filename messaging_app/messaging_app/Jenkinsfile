# Jenkins Docker Setup and Pipeline Configuration Guide

## Step 1: Run Jenkins in Docker Container

Execute the following command to start Jenkins:

```bash
docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts
```

This command will:
- Pull the latest Long-Term Support (LTS) Jenkins image
- Run Jenkins as a daemon (`-d`)
- Name the container "jenkins"
- Expose Jenkins on port 8080 (web UI)
- Expose port 50000 (for Jenkins agents)
- Create a persistent volume for Jenkins data

## Step 2: Initial Jenkins Setup

1. **Access Jenkins Dashboard:**
   - Open your browser and go to `http://localhost:8080`
   - You'll see the "Unlock Jenkins" page

2. **Get Initial Admin Password:**
   ```bash
   docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
   ```
   - Copy the password and paste it in the web interface

3. **Install Suggested Plugins:**
   - Click "Install suggested plugins"
   - Wait for the installation to complete

4. **Create Admin User:**
   - Fill in the admin user details
   - Click "Save and Continue"

## Step 3: Install Required Plugins

1. **Navigate to Plugin Manager:**
   - Go to "Manage Jenkins" → "Manage Plugins"
   - Click on "Available" tab

2. **Install Required Plugins:**
   - Search and install the following plugins:
     - **Git plugin** (usually pre-installed)
     - **Pipeline plugin** (usually pre-installed)
     - **ShiningPanda Plugin** (for Python support)
     - **HTML Publisher Plugin** (for test reports)
     - **JUnit Plugin** (for test results)

3. **Restart Jenkins:**
   ```bash
   docker restart jenkins
   ```

## Step 4: Configure GitHub and Docker Hub Credentials

### GitHub Credentials:
1. **Go to Credentials:**
   - Navigate to "Manage Jenkins" → "Manage Credentials"
   - Click on "System" → "Global credentials (unrestricted)"

2. **Add GitHub Credentials:**
   - Click "Add Credentials"
   - Kind: "Username with password" or "Secret text" (for token)
   - For Username/Password:
     - Username: Your GitHub username
     - Password: Your GitHub personal access token
   - For Secret text:
     - Secret: Your GitHub personal access token
   - ID: `github-credentials` (remember this ID)
   - Description: "GitHub Access Token"

### Docker Hub Credentials:
1. **Add Docker Hub Credentials:**
   - Click "Add Credentials" again
   - Kind: "Username with password"
   - Username: Your Docker Hub username
   - Password: Your Docker Hub password or access token
   - ID: `dockerhub-credentials` (remember this ID)
   - Description: "Docker Hub Credentials"

## Step 5: Create a New Pipeline Job

1. **Create New Item:**
   - Click "New Item"
   - Enter item name (e.g., "python-test-pipeline")
   - Select "Pipeline"
   - Click "OK"

2. **Configure Pipeline:**
   - In the pipeline configuration:
     - Check "GitHub project" and enter your repository URL
     - Under "Build Triggers", you can optionally check "GitHub hook trigger for GITScm polling"
     - Under "Pipeline", select "Pipeline script from SCM"
     - SCM: Git
     - Repository URL: Your GitHub repository URL
     - Credentials: Select the GitHub credentials you created
     - Branch: `*/main` or `*/master`
     - Script Path: `Jenkinsfile`

## Step 6: Create Jenkinsfile

Create a `Jenkinsfile` in your repository root with the following content:

**Option 1: Using checkout with explicit configuration**

```groovy
pipeline {
    agent any
    
    environment {
        // Define environment variables
        PYTHONPATH = "${WORKSPACE}"
        GITHUB_REPO = 'https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git'  // Replace with your repo URL
        GIT_BRANCH = 'main'  // Change to 'master' if using master branch
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub with explicit credentials and branch
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[
                        credentialsId: 'github-credentials',  // This should match your Jenkins credential ID
                        url: "${GITHUB_REPO}"
                    ]]
                ])
                echo 'Code checked out successfully'
            }
        }
```

**Option 2: Using git step (simpler syntax)**

```groovy
pipeline {
    agent any
    
    environment {
        // Define environment variables
        PYTHONPATH = "${WORKSPACE}"
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'  // Docker Hub credential ID
        DOCKER_IMAGE_NAME = 'your-dockerhub-username/messaging-app'  // Replace with your Docker Hub username
        IMAGE_TAG = "${BUILD_NUMBER}"  // Use build number as tag
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub using git step
                git branch: 'main',  // Change to 'master' if using master branch
                    credentialsId: 'github-credentials',  // This should match your Jenkins credential ID
                    url: 'https://github.com/YOUR_USERNAME/YOUR_REPOSITORY.git'  // Replace with your actual repo URL
                echo 'Code checked out successfully'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                script {
                    // Install Python dependencies
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip3 install --upgrade pip
                        pip3 install pytest pytest-html pytest-cov
                        if [ -f messaging_app/requirements.txt ]; then
                            pip3 install -r messaging_app/requirements.txt
                        elif [ -f requirements.txt ]; then
                            pip3 install -r requirements.txt
                        fi
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    // Run pytest with coverage and HTML report
                    sh '''
                        . venv/bin/activate
                        pytest --html=reports/pytest_report.html --self-contained-html --cov=. --cov-report=xml --cov-report=html --junitxml=reports/junit.xml
                    '''
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                // Archive test results
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'reports',
                    reportFiles: 'pytest_report.html',
                    reportName: 'PyTest Report'
                ])
                
                // Archive coverage report
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'htmlcov',
                    reportFiles: 'index.html',
                    reportName: 'Coverage Report'
                ])
                
                // Publish JUnit test results
                junit 'reports/junit.xml'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    echo 'Building Docker image...'
                    sh """
                        docker build -t ${DOCKER_IMAGE_NAME}:${IMAGE_TAG} .
                        docker build -t ${DOCKER_IMAGE_NAME}:latest .
                    """
                    echo "Docker image built successfully: ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub and push image
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS, 
                                                    usernameVariable: 'DOCKER_USERNAME', 
                                                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                            docker push ${DOCKER_IMAGE_NAME}:${IMAGE_TAG}
                            docker push ${DOCKER_IMAGE_NAME}:latest
                            docker logout
                        """
                    }
                    echo "Docker image pushed successfully to Docker Hub"
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images and workspace
            sh '''
                docker system prune -f
                docker rmi ${DOCKER_IMAGE_NAME}:${IMAGE_TAG} || true
                docker rmi ${DOCKER_IMAGE_NAME}:latest || true
            '''
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully! Docker image built and pushed to Docker Hub.'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
```

## Step 7: Project Structure and Required Files

Ensure your project has the following structure:

```
messaging_app/
├── Jenkinsfile
├── Dockerfile                    ← ADD THIS FILE
├── requirements.txt
├── messaging_app/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
│   └── requirements.txt
├── tests/
│   └── test_your_application.py
└── reports/ (will be created by pytest)
```

### Create Dockerfile for Django App:
Create a `Dockerfile` in your repository root:

```dockerfile
# Use Python 3.9 slim image
FROM python:3.9-slim

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt /app/
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy project files
COPY . /app/

# Create non-root user
RUN adduser --disabled-password --gecos '' appuser && \
    chown -R appuser:appuser /app
USER appuser

# Expose port
EXPOSE 8000

# Run Django development server
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
```

### Sample requirements.txt for Django:
```txt
Django>=4.2.0
pytest>=7.0.0
pytest-html>=3.1.0
pytest-cov>=4.0.0
pytest-django>=4.5.0
psycopg2-binary>=2.9.0
gunicorn>=20.1.0
# Add your other Django dependencies here
```

### Sample test file (tests/test_example.py):
```python
import pytest

def add(a, b):
    return a + b

def test_add():
    assert add(2, 3) == 5
    assert add(-1, 1) == 0
    assert add(0, 0) == 0

def test_add_strings():
    assert add("hello", "world") == "helloworld"
```

## Step 8: Configure Jenkins for Docker

### Enable Docker in Jenkins Container:
1. **Update Jenkins Docker run command** to include Docker socket:
   ```bash
   docker stop jenkins
   docker rm jenkins
   
   # Run Jenkins with Docker socket mounted
   docker run -d --name jenkins \
     -p 8080:8080 -p 50000:50000 \
     -v jenkins_home:/var/jenkins_home \
     -v /var/run/docker.sock:/var/run/docker.sock \
     jenkins/jenkins:lts
   
   # Install Docker inside Jenkins container
   docker exec -u root jenkins apt-get update
   docker exec -u root jenkins apt-get install -y docker.io
   docker exec -u root jenkins usermod -aG docker jenkins
   docker restart jenkins
   ```

### Alternative: Use Jenkins with Docker support:
```bash
# Use Jenkins image with Docker pre-installed
docker run -d --name jenkins \
  -p 8080:8080 -p 50000:50000 \
  -v jenkins_home:/var/jenkins_home \
  -v /var/run/docker.sock:/var/run/docker.sock \
  jenkinsci/blueocean
```

1. **Manual Trigger:**
   - Go to your pipeline job
   - Click "Build Now"

2. **Automatic Trigger (Optional):**
   - Set up GitHub webhooks in your repository settings
   - Point to: `http://your-jenkins-url:8080/github-webhook/`

## Step 9: Trigger the Pipeline

1. **Manual Trigger:**
   - Go to your pipeline job in Jenkins dashboard
   - Click "Build Now"
   - Monitor the build progress

2. **Monitor Build Logs:**
   - Click on the build number (e.g., "#1")
   - Click "Console Output" to view real-time logs
   - Look for Docker build and push confirmation messages

3. **Verify Docker Hub:**
   - Check your Docker Hub repository
   - Confirm the image was pushed with both tags: `latest` and build number

## Step 10: View Results

After the pipeline runs:
- **Console Output:** View build logs
- **Test Reports:** Access PyTest and Coverage reports
- **Test Results:** View JUnit test results in Jenkins

## Troubleshooting Tips

1. **Python Not Found:**
   - Ensure Python 3 is installed in the Jenkins container
   - You might need to use a Jenkins agent with Python pre-installed

2. **Permission Issues:**
   - Make sure Jenkins has proper permissions to access Docker and file system

3. **Plugin Issues:**
   - Restart Jenkins after installing plugins
   - Check plugin compatibility with your Jenkins version

4. **GitHub Access Issues:**
   - Ensure your GitHub token has proper permissions
   - Use personal access tokens instead of passwords

## Alternative: Using Docker Agent

For better Python support, you can modify the Jenkinsfile to use a Python Docker image:

```groovy
pipeline {
    agent {
        docker {
            image 'python:3.9'
            args '-u root'
        }
    }
    // ... rest of the pipeline
}
```

This approach ensures a clean Python environment for each build.
